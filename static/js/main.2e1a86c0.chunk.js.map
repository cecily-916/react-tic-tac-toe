{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","disabled","gameStatus","className","onClick","updatedSquare","id","onClickCallback","value","Board","squareList","squares","concat","map","square","generateSquareComponents","playerOne","generateSquares","currentId","row","push","col","App","useState","setSquares","player","setPlayer","isGameOver","setGameStatus","winner","setWinner","checkForWinner","i","updatedWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e1a86c0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css';\n\nconst Square = (props) => {\n  const onSquareClicked = () => {\n    const updatedSquare = {\n      id: props.id,\n    };\n    props.onClickCallback(updatedSquare);\n  };\n\n  return (\n    <button\n      disabled={props.gameStatus}\n      className=\"square\"\n      onClick={onSquareClicked}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  gameStatus: PropTypes.bool,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n// This turns the 2D array into a 1D array\nconst generateSquareComponents = (squares, onClickCallback, gameStatus) => {\n  const singleArraySquares = [].concat(...squares);\n  return singleArraySquares.map((square) => {\n    return (\n      <Square\n        value={square.value}\n        id={square.id}\n        onClickCallback={onClickCallback}\n        key={square.id}\n        gameStatus={gameStatus}\n      />\n    );\n  });\n};\n\nconst Board = ({ squares, onClickCallback, gameStatus }) => {\n  const squareList = generateSquareComponents(\n    squares,\n    onClickCallback,\n    gameStatus\n  );\n  // console.log(squareList);\n  return <div className=\"grid\">{squareList}</div>;\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired,\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n  gameStatus: PropTypes.bool,\n};\n\nexport default Board;\n","import { check } from 'prettier';\nimport React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst playerOne = 'x';\nconst playerTwo = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  // console.log(squares);\n  return squares;\n};\n\nconst App = () => {\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [player, setPlayer] = useState(playerOne);\n  const [isGameOver, setGameStatus] = useState(false);\n  const [winner, setWinner] = useState('');\n\n  const updateOnClick = (updatedSquare) => {\n    const squaresData = squares.map((row) => {\n      row.map((square) => {\n        if (square.id === updatedSquare.id) {\n          if (square.value === '') {\n            square.value = player;\n            const updatedWinner = checkForWinner();\n            if (updatedWinner) {\n              setWinner(updatedWinner);\n              setGameStatus(true);\n            }\n            setPlayer(player === playerOne ? playerTwo : playerOne);\n          }\n        }\n      });\n    });\n  };\n\n  const checkForWinner = () => {\n    let i = 0;\n    // Check all the rows and columns for a winner\n    while (i < 3) {\n      if (\n        squares[i][0].value === squares[i][1].value &&\n        squares[i][2].value === squares[i][1].value &&\n        squares[i][0].value !== ''\n      ) {\n        return squares[i][0].value;\n      } else if (\n        squares[0][i].value === squares[1][i].value &&\n        squares[2][i].value === squares[1][i].value &&\n        squares[0][i].value !== ''\n      ) {\n        return squares[0][i].value;\n      }\n      i += 1;\n    }\n    // Check Top-Left to bottom-right diagonal\n    if (\n      squares[0][0].value === squares[1][1].value &&\n      squares[2][2].value === squares[1][1].value &&\n      squares[1][1].value !== ''\n    ) {\n      return squares[0][0].value;\n    }\n\n    // Check Top-right to bottom-left diagonal\n    if (\n      squares[0][2].value === squares[1][1].value &&\n      squares[2][0].value === squares[1][1].value &&\n      squares[1][1].value !== ''\n    ) {\n      return squares[0][2].value;\n    }\n\n    return null;\n  };\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setWinner('');\n    setGameStatus(false);\n    setPlayer(playerOne);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>Winner is {winner}</h2>\n        <h2>It&apos;s {player}&apos;s turn! </h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board\n          squares={squares}\n          onClickCallback={updateOnClick}\n          gameStatus={isGameOver}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}